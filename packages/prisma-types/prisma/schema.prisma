// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                   String                @id @default(cuid())
  name                 String?
  email                String?               @unique
  emailVerified        DateTime?
  image                String?
  accounts             Account[]
  sessions             Session[]
  productNotifications ProductNotification[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Store {
  id          String    @id @default(cuid())
  handle      String    @unique
  name        String
  externalUrl String
  products    Product[]
}

model Product {
  id            String                @id @default(cuid())
  productCode   String
  name          String
  storeId       String
  variants      ProductVariant[]
  notifications ProductNotification[]

  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@unique([storeId, productCode])
  @@index([storeId])
}

model Price {
  id               String   @id @default(cuid())
  productVariantId String
  timestamp        DateTime @default(now())
  priceInCents     Int

  productVariant ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)

  @@index([productVariantId])
}

model Stock {
  id               String   @id @default(cuid())
  productVariantId String
  timestamp        DateTime @default(now())
  stock            Int?
  inStock          Boolean

  productVariant ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)

  @@index([productVariantId])
}

model ProductVariant {
  id            String                @id @default(cuid())
  productId     String
  style         String
  size          String
  prices        Price[]
  stocks        Stock[]
  notifications ProductNotification[]

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, style, size])
  @@index([productId])
}

model ProductNotification {
  id               String  @id @default(cuid())
  userId           String
  productId        String
  productVariantId String
  priceInCents     Int?
  mustBeInStock    Boolean

  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  product        Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  productVariant ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)

  @@unique([userId, productVariantId])
  @@index([userId])
  @@index([productId])
  @@index([productVariantId])
}
